#!/usr/bin/env bash

#
# manage secrets

set -eu
shopt -s inherit_errexit

#######################################
# display script' commands
# Arguments:
#   0
#######################################
commands() { awk -F '(' '/^[a-z].*\(\)/ && ! /^main/ { print $1 }' "$0"; }

#######################################
# helper for docker function
# Arguments:
#   1
#   2
#   3
#######################################
_docker() {
  local url=( "${3-}" )
  ! yes yes | command docker login "${url[@]}" &>/dev/null || return 0
  echo "$2" | command docker login "${url[@]}" --username "$1" --password-stdin
}

#######################################
# exit with code 0 if not command
# Arguments:
#  None
#######################################
_has() { type "${FUNCNAME[1]%-*}" &>/dev/null || exit 0; }

#######################################
# sets $PATH and update /etc/profile and /etc/zprofile
# Globals:
#   GH_TOKEN
#   LIB
# Arguments:
#   0
#######################################
_profile() {
  local bin file
  bin="$(cd "$(dirname "$0")"; pwd -P)"
  LIB="${bin}/${0##*/}.sh"

  if ! command -v "${0##*/}" >/dev/null; then
    if test -d /etc/paths.d && ! grep -q "${bin}" /etc/paths.d/* 2>/dev/null; then
      echo "${bin}" | sudo tee "/etc/paths.d/${0##*/}" >/dev/null
    elif ! test -d /etc/paths.d; then
      for file in /etc/profile /etc/zprofile; do
        if ! grep -q "=${LIB}:" "${file}"; then
          echo "export PATH=\"${LIB}:\${PATH}\""  | _sudo tee -a "${file}" >/dev/null
        fi
      done
      set +u && . /etc/profile && set -u && command -v "${0##*/}">/dev/null
    fi
  fi

  if [ ! "${GH_TOKEN-}" ]; then
    if test -f "${LIB}"; then
      for file in /etc/profile /etc/zprofile; do
       if ! grep -q GH_TOKEN "${file}"; then
         echo "! test -f ${LIB} || . ${LIB}"  | _sudo tee -a "${file}" >/dev/null
       fi
      done
      set +u && . /etc/profile && set -u && : "${GH_TOKEN?}"
    else
      : "${GH_TOKEN?"\$GH_TOKEN: undefined, and/or ${LIB}: not found"}"
    fi
  fi
}

#######################################
# helper for ssh function
# Arguments:
#   1
#   2
#   3
#######################################
_ssh() {
  if [ ! -f "${1}" ] || { [ -f "${1}" ] && [ "${2}" != "$(cat "${1}")" ]; }; then
    echo "${2}" >"${1}"
    chmod go-rx "${1}"
  fi
  [ ! "${3-}" ] || grep -q "${2}" "${3}" 2>/dev/null || echo "${2}" >>"${3}"
}

#######################################
# run sudo if sudo command
# Arguments:
#  None
#######################################
_sudo() {
  if test -x /usr/bin/sudo; then
    exec /usr/bin/sudo "$@"
  else
    "$@"
  fi
}

#######################################
# run sudo if user is not root and sudo installed
# Arguments:
#  None
#######################################
_sudo_if_root() {
  if [ "$(id -u)" -eq 0 ]; then
    "$@"
  else
    _sudo "$@"
  fi
}

#######################################
# change to top dir or exit if not git dir
# Arguments:
#  None
#######################################
_top() {
  local top
  if top="$(git rev-parse --show-toplevel)"; then
    cd "${top}"
  else
    exit
  fi
}

#######################################
# login to docker hub and ghcr.io
# Arguments:
#  None
#######################################
docker() {
  _has
  command docker version &>/dev/null || return 0
  _docker "${GIT}" "${DOCKER_HUB_TOKEN}"
  _docker "${GIT}" "${GITHUB_TOKEN}" ghcr.io
}

#######################################
# updates doppler with secrets
# Globals:
#   DOPPLER_TOKEN
#   ORG
# Arguments:
#  None
#######################################
doppler() {
  _has
  local name
  while read -r name; do
    echo "${!name}" | command doppler --silent --config "${DOPPLER_ENV}" --project "${ORG}" \
          --token "${DOPPLER_TOKEN}" secrets set "${name}"
  done < <(list | grep -v ID_RSA)
}

#######################################
# get all secrets from doppler as "export name=value"
# Arguments:
#  None
#######################################
doppler-get() {
  _has
  local conf tmp
  tmp="$(mktemp)"
  cat > "${tmp}" <<EOF
setup:
  project: ${ORG}
  config: ${DOPPLER_ENV}
EOF
  conf="$(brew --prefix)/etc/doppler.yml"
  [ -f "${conf}" ] || cp "${tmp}" "${conf}"
  #  grep -q token "${conf}" || command doppler --configuration "${conf}" login --yes
  command doppler --configuration "${conf}" --silent secrets --token "${DOPPLER_TOKEN}" --json | \
  jq -r '. | to_entries[]  | "export \(.key)='\''\(.value.computed)'\''"'
}

#######################################
# format secrets with "-e" to be used with docker
# Globals:
#   DOCKER_HUB_TOKEN
#   GHCR_IO_TOKEN
#   GIT
# Arguments:
#  None
# Returns:
#   0 ...
#######################################
env() {
  local name env=()
  while read -r name; do
    env+=( -e "${name}")
  done < <(list)
  printf '%s ' "${env[@]}"
}

#######################################
# set secrets for new names at the repository or organization level
# Arguments:
#  None
#######################################
gh() {
  _has
  local existing="" list name new old org=() visibility=()

  if [ "${2-}" ]; then
    org+=(--org "$2")
  else
    _top
  fi

  [ "$1" -eq 1 ] || existing="$(command gh secret list "${org[@]}" | awk '{ print $1 }' | sort)"

  list="$(list | grep -v "^GITHUB_")"

  [ "${existing}" != "${list}" ] || return 0

  new="$(mktemp)"; echo "${list}" > "${new}"
  old="$(mktemp)"; echo "${existing}" > "${old}"

  while read -r name; do
    [ ! "${org-}" ] || visibility+=(--visibility all)
    [ ! "${name-}" ] || command gh secret set "${org[@]}" "${visibility[@]}" "${name}" --body "${!name}"
  done < <(comm -12 "${old}" "${new}" && comm -13 "${old}" "${new}" | sort)

  while read -r name; do
    [ ! "${name-}" ] || command gh secret remove "${org[@]}" "${name}"
  done < <(comm -23 "${old}" "${new}")
}

#######################################
# show usage
# Globals:
#   USER
# Arguments:
#   0
#######################################
help() {
  local rc=$?
  [ ! "${1-}" ] || { echo "${0##*/}: $1: invalid command"; echo; }
  >&2 cat <<EOF
usage: ${0##*/} <command>
   or: ${0##*/} -h|--help
   or: . ${0##*/}

update secrets in repositories, login to services, or updates ssh.

Commands:
   commands     display ${0##*/}' commands
   docker       login to docker hub and ghcr.io
   doppler      updates doppler with secrets
   doppler-get  get all secrets from doppler as "export name=value"
   env          format secret names with "-e" to be used with docker
                i.e: . ${0##*/}.sh; docker run "\$(${0##*/} env)" --rm alpine env
   help         show help and exit
   mnopi        update secrets at the organization level if the list of names has changed
   mnopi-all    update all secrets at the organization level
   repo         update secrets at the repository level if the list of names has changed
   repo-all     update all secrets at the repository level
   list         show secret names
   ssh          installs id_rsa and updates ssh config for ${USER}, root and /etc/ssh
   vercel       add secrets for repository to vercel, link the project and sets env
EOF
  exit $rc
}

#######################################
# show secret names
# Globals:
#   LIB
# Arguments:
#   0
#######################################
list() {
  awk -F '[= ]' "/^export .*=/ && ! /^export .*=\"\"/ && ! /^export .*=$/ && ! /^export .*=''/ { print \$2 }" \
    "${LIB}" | sort
}

#######################################
# installs id_rsa and updates ssh config for $USER, root and /etc/ssh
# Globals:
#   HOME
#   ID_RSA
#   ID_RSA_PUB
#   SUDO_USER
# Arguments:
#   0
#######################################
ssh() {
  _has
  local dir config
  config="$(cat <<EOF
AddressFamily inet
BatchMode yes
CheckHostIP no
ControlMaster auto
ControlPath /tmp/ssh-%h-%r-%p
ControlPersist 20m
IdentitiesOnly yes
IdentityFile ~/.ssh/id_rsa
LogLevel QUIET
StrictHostKeyChecking no
User ${GIT}
UserKnownHostsFile /dev/null
EOF
)"
  dir="${HOME}/.ssh"
  [ -d "${dir}" ] || { mkdir "${dir}"; chmod go-rx "${dir}"; }
  _ssh "${dir}/id_rsa" "${ID_RSA}"
  _ssh "${dir}/id_rsa.pub" "${ID_RSA_PUB}" "${dir}/authorized_keys"

  if [ "$(id -u)" -eq 0 ]; then
    dir="/etc/ssh"
    [ -d "${dir}" ] || mkdir "${dir}"
    _ssh "${dir}/id_rsa" "${ID_RSA}"
    _ssh "${dir}/id_rsa.pub" "${ID_RSA_PUB}" "${dir}/authorized_keys"
    _ssh "${dir}/ssh_config" "${config}"
  elif [ ! "${SUDO_USER-}" ]; then
    _sudo_if_root "$0" ssh
  fi
}

#######################################
# add secrets for repository to vercel, link the project and sets env
# Globals:
#   VERCEL_TOKEN
# Arguments:
#  None
#######################################
vercel() {
  _has
  local name tmp
  while read -r name; do
    command vercel secrets --token="${VERCEL_TOKEN}" add "${name}" "${!name}"
    command vercel link --token="${VERCEL_TOKEN}" --confirm
    # command vercel link --token="${VERCEL_TOKEN}" <path>
    tmp="$(mkdtemp)"; echo "${!name}" > "${tmp}"
    command vercel env --token="${VERCEL_TOKEN}" add "${name}" < "${tmp}"
    # command vercel env add "${name}" production <<< "${!name}"
    # command vercel --token="${VERCEL_TOKEN}" -e "${name}"=@"${!name}"
  done < <(list)
}

#######################################
# update secrets in repositories, login to services, or updates ssh.
# Globals:
#   LIB
# Arguments:
#   0
#######################################
main() {
  _profile

  [ "${1-}" ] || gh 0

  while (( $# )); do
    case "$1" in
      --help|-h|help) help ;;
      commands|docker|doppler|doppler-get|env|list|ssh|vercel) "$1" ;;
      mnopi) gh 0 "$1";;
      mnopi-all) gh 1 "${1/-all/}";;
      repo) gh 0 ;;
      repo-all) gh 1 ;;
      *) false || help "$1" ;;
    esac
    shift
  done
}

main "$@"
